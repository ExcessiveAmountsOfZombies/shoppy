import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = project.modVersion
group = project.mavenGroup
archivesBaseName = project.modBaseArchiveName


repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
    maven { url 'https://jitpack.io' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenLocal()
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraftVersion}:${project.parchmentVersion}")
    }

    modImplementation(include("me.lucko:fabric-permissions-api:0.1-SNAPSHOT"))
    modImplementation(include("com.epherical.octo-economy-api:OctoEconomyApi-fabric:1.0.1-1.18.2"))

    modImplementation "net.fabricmc:fabric-loader:${project.fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricAPIVersion}"

    shade(rootProject)
    compileOnly(rootProject)
    implementation(rootProject)
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": version
    }
}

tasks.processResources.dependsOn(rootProject.tasks.processResources)

loom {
    //accessWidenerPath = file("src/main/resources/bozoiD.accesswidener")

    runs {
        client {
            client()
            name "Fabric Client"
            ideConfigGenerated = true
        }

        server {
            server()
            name "Fabric Server"
            ideConfigGenerated = true
        }

        datagen {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${getRootProject().file("src/main/generated")}"
            runDir "build/datagen"
            ideConfigGenerated = true
        }
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    source(rootProject.sourceSets.main.allSource)
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.modBaseArchiveName
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    archiveFileName = rootProject.modBaseArchiveName + "-${rootProject.minecraftVersion}-FABRIC-dev.jar"
    configurations = [project.configurations.shade]
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    archiveFileName = rootProject.modBaseArchiveName + "-${rootProject.minecraftVersion}-FABRIC-${rootProject.version}.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated",
                    rootProject.sourceSets.main.resources
            ]
        }
    }
}

